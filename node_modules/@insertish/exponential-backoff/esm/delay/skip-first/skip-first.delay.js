var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Delay } from "../delay.base";
export class SkipFirstDelay extends Delay {
    apply() {
        const _super = Object.create(null, {
            apply: { get: () => super.apply }
        });
        return __awaiter(this, void 0, void 0, function* () {
            return this.isFirstAttempt ? true : _super.apply.call(this);
        });
    }
    get isFirstAttempt() {
        return this.attempt === 0;
    }
    get numOfDelayedAttempts() {
        return this.attempt - 1;
    }
}
