"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.backOff = void 0;
const options_1 = require("./options");
const delay_factory_1 = require("./delay/delay.factory");
function backOff(request, options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const sanitizedOptions = options_1.getSanitizedOptions(options);
        const backOff = new BackOff(request, sanitizedOptions);
        return yield backOff.execute();
    });
}
exports.backOff = backOff;
class BackOff {
    constructor(request, options) {
        this.request = request;
        this.options = options;
        this.attemptNumber = 0;
    }
    execute() {
        return __awaiter(this, void 0, void 0, function* () {
            while (!this.attemptLimitReached) {
                try {
                    yield this.applyDelay();
                    return yield this.request();
                }
                catch (e) {
                    this.attemptNumber++;
                    const shouldRetry = yield this.options.retry(e, this.attemptNumber);
                    if (!shouldRetry || this.attemptLimitReached) {
                        throw e;
                    }
                }
            }
            throw new Error("Something went wrong.");
        });
    }
    get attemptLimitReached() {
        return this.attemptNumber >= this.options.numOfAttempts;
    }
    applyDelay() {
        return __awaiter(this, void 0, void 0, function* () {
            const delay = delay_factory_1.DelayFactory(this.options, this.attemptNumber);
            yield delay.apply();
        });
    }
}
