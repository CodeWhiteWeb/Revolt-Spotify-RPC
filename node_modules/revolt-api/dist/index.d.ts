import type { AxiosRequestConfig } from 'axios';
export * from './types';
import type { APIRoutes } from './routes';
declare type Methods = APIRoutes['method'];
declare type PickRoutes<Method extends Methods> = APIRoutes & {
    method: Method;
};
declare type GetRoutes = PickRoutes<'get'>;
declare type PatchRoutes = PickRoutes<'patch'>;
declare type PutRoutes = PickRoutes<'put'>;
declare type DeleteRoutes = PickRoutes<'delete'>;
declare type PostRoutes = PickRoutes<'post'>;
declare type Count<Str extends string, SubStr extends string, Matches extends null[] = []> = Str extends `${infer _}${SubStr}${infer After}` ? Count<After, SubStr, [...Matches, null]> : Matches['length'];
/**
 * Get the specific path name of any given path.
 * @param anyPath Any path
 * @returns Specific path
 */
export declare function getPathName(anyPath: string): string | undefined;
/**
 * Client configuration options
 */
export interface Options {
    /**
     * Base URL of the Revolt node
     */
    baseURL: string;
    /**
     * Authentication used for requests
     */
    authentication: {
        rauth?: string | undefined;
        revolt?: {
            token: string;
        } | string | undefined;
    };
}
/**
 * API Client
 */
export declare class API {
    private baseURL;
    private authentication;
    constructor({ baseURL, authentication }?: Partial<Options>);
    /**
     * Generate authentication options.
     */
    get auth(): AxiosRequestConfig;
    /**
     * Generate config to pass through to API.
     */
    get config(): AxiosRequestConfig;
    /**
     * Send any arbitrary request.
     * @param method HTTP Method
     * @param path Path
     * @param params Body or Query Parameters
     * @param config Axios configuration
     * @returns Typed Response Data
     */
    req<Method extends Methods, Routes extends PickRoutes<Method>, Path extends Routes['path'], Route extends Routes & {
        path: Path;
        parts: Count<Path, '/'>;
    }>(method: Method, path: Path, params: Route['params'], config?: AxiosRequestConfig): Promise<Route['response']>;
    /**
     * Send HTTP GET request.
     * @param path Path
     * @param params Body or Query Parameters
     * @param config Axios configuration
     * @returns Typed Response Data
     */
    get<Path extends GetRoutes['path'], Route extends GetRoutes & {
        path: Path;
        parts: Count<Path, '/'>;
    }>(path: Path, params: Route['params'], config?: AxiosRequestConfig): Promise<Route['response']>;
    /**
     * Send HTTP GET request.
     * @param path Path
     * @returns Typed Response Data
     */
    get<Path extends (GetRoutes & {
        params: undefined;
    })['path'], Route extends GetRoutes & {
        path: Path;
        parts: Count<Path, '/'>;
    }>(path: Path): Promise<Route['response']>;
    /**
     * Send HTTP PATCH request.
     * @param path Path
     * @param params Body or Query Parameters
     * @param config Axios configuration
     * @returns Typed Response Data
     */
    patch<Path extends PatchRoutes['path'], Route extends PatchRoutes & {
        path: Path;
        parts: Count<Path, '/'>;
    }>(path: Path, params: Route['params'], config?: AxiosRequestConfig): Promise<Route['response']>;
    /**
     * Send HTTP PATCH request.
     * @param path Path
     * @returns Typed Response Data
     */
    patch<Path extends (PatchRoutes & {
        params: undefined;
    })['path'], Route extends PatchRoutes & {
        path: Path;
        parts: Count<Path, '/'>;
    }>(path: Path): Promise<Route['response']>;
    /**
     * Send HTTP PUT request.
     * @param path Path
     * @param params Body or Query Parameters
     * @param config Axios configuration
     * @returns Typed Response Data
     */
    put<Path extends PutRoutes['path'], Route extends PutRoutes & {
        path: Path;
        parts: Count<Path, '/'>;
    }>(path: Path, params: Route['params'], config?: AxiosRequestConfig): Promise<Route['response']>;
    /**
     * Send HTTP PUT request.
     * @param path Path
     * @returns Typed Response Data
     */
    put<Path extends (PutRoutes & {
        params: undefined;
    })['path'], Route extends PutRoutes & {
        path: Path;
        parts: Count<Path, '/'>;
    }>(path: Path): Promise<Route['response']>;
    /**
     * Send HTTP DELETE request.
     * @param path Path
     * @param params Body or Query Parameters
     * @param config Axios configuration
     * @returns Typed Response Data
     */
    delete<Path extends DeleteRoutes['path'], Route extends DeleteRoutes & {
        path: Path;
        parts: Count<Path, '/'>;
    }>(path: Path, params?: any, config?: AxiosRequestConfig): Promise<Route['response']>;
    /**
     * Send HTTP DELETE request.
     * @param path Path
     * @param params Body or Query Parameters
     * @returns Typed Response Data
     */
    delete<Path extends (DeleteRoutes & {
        params: undefined;
    })['path'], Route extends DeleteRoutes & {
        path: Path;
        parts: Count<Path, '/'>;
    }>(path: Path, params?: any): Promise<Route['response']>;
    /**
     * Send HTTP POST request.
     * @param path Path
     * @param params Body or Query Parameters
     * @param config Axios configuration
     * @returns Typed Response Data
     */
    post<Path extends PostRoutes['path'], Route extends PostRoutes & {
        path: Path;
        parts: Count<Path, '/'>;
    }>(path: Path, params: Route['params'], config?: AxiosRequestConfig): Promise<Route['response']>;
    /**
     * Send HTTP POST request.
     * @param path Path
     * @returns Typed Response Data
     */
    post<Path extends (PostRoutes & {
        params: undefined;
    })['path'], Route extends PostRoutes & {
        path: Path;
        parts: Count<Path, '/'>;
    }>(path: Path): Promise<Route['response']>;
}
