// This file was auto-generated by @insertish/oapi!
import Axios from 'axios';
import defaultsDeep from 'lodash.defaultsdeep';
export * from './types';
import { defaultBaseURL } from './baseURL';
import { pathResolve, queryParams } from './params';
/**
 * Get the specific path name of any given path.
 * @param anyPath Any path
 * @returns Specific path
 */
export function getPathName(anyPath) {
    const segments = anyPath.split('/');
    const list = pathResolve[(segments.length - 1).toString()] || [];
    for (const entry of list) {
        let i = 1;
        let copy = [...segments];
        for (i; i < segments.length; i++) {
            if (Array.isArray(entry[i - 1])) {
                copy[i] = entry[i - 1];
                continue;
            }
            else if (entry[i - 1] !== segments[i])
                break;
        }
        if (i === segments.length)
            return copy.join('/');
    }
}
/**
 * API Client
 */
export class API {
    baseURL;
    authentication;
    constructor({ baseURL, authentication } = {}) {
        this.baseURL = baseURL || defaultBaseURL;
        this.authentication = authentication || {};
    }
    /**
     * Generate authentication options.
     */
    get auth() {
        if (this.authentication.rauth) {
            if (typeof this.authentication.rauth === 'string') {
                return {
                    headers: {
                        'X-Session-Token': this.authentication.rauth
                    }
                };
            }
        }
        else if (this.authentication.revolt) {
            switch (typeof this.authentication.revolt) {
                case 'string': {
                    return {
                        headers: {
                            'X-Bot-Token': this.authentication.revolt
                        }
                    };
                }
                case 'object': {
                    return {
                        headers: {
                            'X-Session-Token': this.authentication.revolt.token
                        }
                    };
                }
            }
        }
        return {};
    }
    /**
     * Generate config to pass through to API.
     */
    get config() {
        return {
            baseURL: this.baseURL,
            ...this.auth,
        };
    }
    /**
     * Send any arbitrary request.
     * @param method HTTP Method
     * @param path Path
     * @param params Body or Query Parameters
     * @param config Axios configuration
     * @returns Typed Response Data
     */
    req(method, path, params, config) {
        let query, body;
        let named = getPathName(path);
        // If we are aware of this route, then match the parameters given.
        if (named && typeof params === 'object') {
            const route = queryParams[named];
            const allowed_query = route[method];
            // Map each parameter to the correct object.
            for (const parameter of Object.keys(params)) {
                if (allowed_query?.includes(parameter)) {
                    query = {
                        ...(query || {}),
                        [parameter]: params[parameter]
                    };
                }
                else {
                    body = {
                        ...(body || {}),
                        [parameter]: params[parameter]
                    };
                }
            }
        }
        return Axios(path, defaultsDeep({
            method,
            params: query,
            data: body
        }, defaultsDeep(config, this.config)))
            .then(res => res.data);
    }
    get(path, params, config) {
        // @ts-ignore-next-line
        return this.req('get', path, params, config);
    }
    patch(path, params, config) {
        // @ts-ignore-next-line
        return this.req('patch', path, params, config);
    }
    put(path, params, config) {
        // @ts-ignore-next-line
        return this.req('put', path, params, config);
    }
    delete(path, params, config) {
        // @ts-ignore-next-line
        return this.req('delete', path, params, config);
    }
    post(path, params, config) {
        // @ts-ignore-next-line
        return this.req('post', path, params, config);
    }
}
